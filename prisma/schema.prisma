// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  terms       Term[]
  courses     Course[]
  assignments Assignment[]
  events      Event[]
}

model Term {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses     Course[]
  assignments Assignment[]
  events      Event[]
}

model Course {
  id          String   @id @default(cuid())
  name        String
  code        String?
  instructor  String?
  description String?
  credits     Int?
  termId      String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
  assignments Assignment[]
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime
  priority    Int      @default(1)
  status      AssignmentStatus @default(PENDING)
  courseId    String?
  termId      String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
  course      Course?  @relation(fields: [courseId], references: [id], onDelete: SetNull)
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  type        EventType @default(GENERAL)
  termId      String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  term        Term     @relation(fields: [termId], references: [id], onDelete: Cascade)
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum EventType {
  GENERAL
  EXAM
  PROJECT
  MEETING
  HOLIDAY
}